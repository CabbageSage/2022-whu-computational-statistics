r <- function(tib, col1=1, col2=2) {
return(cor(tib[, col1], tib[, col2])[[1]])
}
# jackknife
r_boot <-  grp_boot %>% map_dbl(r)
jknf <- r_boot %>% jackknife(mean)
#result
jknf$jack.se
r_mu <- r(data_law)
r_mu
# bootstrap again
boot_grp_boot <- list()
for (i in 1:n){
boot_grp_boot[i] <- bootstrap(grp_boot[i] %>% as.data.frame(), n)
}
grp_boot_grp_boot <- list()
sd_r_boot <- list()
for (i in 1:n){
grp_boot_grp_boot[[i]] <- boot_grp_boot[[i]] %>% map(as_tibble)
}
for (i in 1:n){
sd_r_boot[[i]] <- grp_boot_grp_boot[[i]] %>% map_dbl(r) %>% sd()
}
boot_grp_boot
grp_boot_grp_boot
sd_r_boot
t_boot <- (r_boot - r_mu) / sd_r_boot
grp_boot_grp_boot[[1]]
grp_boot_grp_boot[[i]] %>% map_dbl(r) %>% sd()
# bootstrap again
boot_grp_boot <- list()
for (i in 1:n){
boot_grp_boot[i] <- bootstrap(grp_boot[i] %>% as.data.frame(), n)
}
grp_boot_grp_boot <- list()
sd_r_boot <- list()
for (i in 1:n){
grp_boot_grp_boot[[i]] <- boot_grp_boot[[i]] %>% map(as_tibble)
}
for (i in 1:n){
sd_r_boot[[i]] <- grp_boot_grp_boot[[i]] %>%
map_dbl(r) %>%
sd() %>%
as_vector()
}
sd_r_boot
sd_r_boot %>% as_vector()
# bootstrap again
boot_grp_boot <- list()
for (i in 1:n){
boot_grp_boot[i] <- bootstrap(grp_boot[i] %>% as.data.frame(), n)
}
grp_boot_grp_boot <- list()
sd_r_boot <- list()
for (i in 1:n){
grp_boot_grp_boot[[i]] <- boot_grp_boot[[i]] %>% map(as_tibble)
}
for (i in 1:n){
sd_r_boot[[i]] <- grp_boot_grp_boot[[i]] %>%
map_dbl(r) %>%
sd()
}
sd_r_boot <- sd_r_boot %>% as_vector()
# bootstrap again
boot_grp_boot <- list()
for (i in 1:n){
boot_grp_boot[i] <- bootstrap(grp_boot[i] %>% as.data.frame(), n)
}
grp_boot_grp_boot <- list()
sd_r_boot <- list()
for (i in 1:n){
grp_boot_grp_boot[[i]] <- boot_grp_boot[[i]] %>% map(as_tibble)
}
for (i in 1:n){
sd_r_boot[[i]] <- grp_boot_grp_boot[[i]] %>%
map_dbl(r) %>%
sd()
}
sd_r_boot <- sd_r_boot %>% as_vector()
sd_r_boot
t_boot <- (r_boot - r_mu) / sd_r_boot
alpha <- 0.05
Qt <- quantile(t_boot, c(alpha/2, 1-alpha/2), type = 1)
t_boot
# bootstrap for every sample
boot_grp_boot <- list()
grp_boot_grp_boot <- list()
for (i in 1:n){
boot_grp_boot[i] <- bootstrap(grp_boot[i] %>% as.data.frame(), n)
grp_boot_grp_boot[[i]] <- boot_grp_boot[[i]] %>% map(as_tibble)
}
sd_r_boot <- list()
for (i in 1:n){
sd_r_boot[[i]] <- grp_boot_grp_boot[[i]] %>%
map_dbl(r) %>%
sd()
}
sd_r_boot <- sd_r_boot %>% as_vector()
sd_r_boot
boot_grp_boot
grp_boot_grp_boot
# bootstrap for every sample
boot_grp_boot <- list()
grp_boot_grp_boot <- list()
sd_r_boot <- list()
for (i in 1:n){
boot_grp_boot[i] <- bootstrap(grp_boot[i] %>% as.data.frame(), n)
grp_boot_grp_boot[[i]] <- boot_grp_boot[[i]] %>% map(as_tibble) # convert to tibble
sd_r_boot[[i]] <- grp_boot_grp_boot[[i]] %>%
map_dbl(r) %>%
sd()
}
sd_r_boot <- sd_r_boot %>% as_vector()
sd_r_boot
# bootstrap for every sample
boot_grp_boot <- list()
grp_boot_grp_boot <- list()
sd_r_boot <- numeric(0)
for (i in 1:n){
boot_grp_boot[i] <- bootstrap(grp_boot[i] %>% as.data.frame(), n)
grp_boot_grp_boot[[i]] <- boot_grp_boot[[i]] %>%
map(as_tibble) # convert to tibble
sd_r_boot[[i]] <- grp_boot_grp_boot[[i]] %>%
map_dbl(r) %>%
sd()
}
# sd_r_boot <- sd_r_boot %>% as_vector()
sd_r_boot
# bootstrap for every sample
boot_grp_boot <- list()
grp_boot_grp_boot <- list()
sd_r_boot <- numeric(0)
for (i in 1:n){
boot_grp_boot[i] <- bootstrap(grp_boot[i] %>% as.data.frame(), n)
grp_boot_grp_boot[[i]] <- boot_grp_boot[[i]] %>%
map(as_tibble) # convert to tibble
sd_r_boot[[i]] <- grp_boot_grp_boot[[i]] %>%
map_dbl(r) %>%
sd()
}
sd_r_boot
data_air <- boot::aircondit
data_air
data_air
data_air <- boot::aircondit %>% as_tibble()
data_air
data_air
data_air %>% diff()
install.packages("lubridate")
install.packages("lubridate")
install.packages(c("httr", "tibble"))
diff(data_air)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(modelr)
library(corrr)
jackknife <- bootstrap::jackknife
data_air <- boot::aircondit
roll(data_air)
diff(data_air)
data_air <- boot::aircondit %>% as_vector()
data_air
data_air %>% diff()
data_air <- boot::aircondit
vec_time_diff <- data_air %>%
as_vector() %>%
diff()
data_air <- boot::aircondit
vec_time_diff <- data_air %>%
as_vector() %>%
diff()
vec_time_diff
data_air <- boot::aircondit
vec_time_diff <- data_air %>%
as_vector() %>%
diff()
vec_time_diff
boot::aircondit
vec_time_diff[[1]]
MLE_lambda <- 1 / mean(vec_time_diff)
MLE_lambda
MLE_lambda <- 1 / mean(vec_time_diff)
bootstrap(vec_time_diff)
MLE_lambda <- 1 / mean(vec_time_diff)
bootstrap(vec_time_diff, 3)
MLE_lambda <- 1 / mean(vec_time_diff)
data_air_time_diff <- vec_air_time_diff %>%
as.data.frame()
data_air <- boot::aircondit
vec_air_time_diff <- data_air %>%
as_vector() %>%
diff()
vec_air_time_diff
MLE_lambda <- 1 / mean(vec_time_diff)
data_air_time_diff <- vec_air_time_diff %>%
as.data.frame()
bootstrap(vec_time_diff, 3)
data_air_time_diff
MLE_lambda <- 1 / mean(vec_time_diff)
data_air_time_diff <- vec_air_time_diff %>%
as_data_frame()
bootstrap(vec_time_diff, 3)
data_air_time_diff
MLE_lambda <- 1 / mean(vec_time_diff)
data_air_time_diff <- vec_air_time_diff %>%
as_tibble()
bootstrap(vec_time_diff, 3)
data_air_time_diff
MLE_lambda <- 1 / mean(vec_time_diff)
data_air_time_diff <- vec_air_time_diff %>%
as_tibble()
bootstrap(vec_time_diff, 3)
MLE_lambda <- 1 / mean(vec_time_diff)
data_air_time_diff <- vec_air_time_diff %>%
as_tibble()
bootstrap(data_air_time_diff, 3)
MLE_lambda <- 1 / mean(vec_time_diff)
data_air_time_diff <- vec_air_time_diff %>%
as_tibble()
bootstrap(data_air_time_diff, 3)$strap
MLE_lambda <- 1 / mean(vec_time_diff)
data_air_time_diff <- vec_air_time_diff %>%
as_tibble()
bootstrap(data_air_time_diff, 3)$strap %>% map(as_tibble)
install.packages("boot")
install.packages("boot")
MLE_lambda <- 1 / mean(vec_time_diff)
#
# data_air_time_diff <- vec_air_time_diff %>%
#   as_tibble()
#
# bootstrap(data_air_time_diff, 3)$strap %>%
#   map(as_tibble)
boot::boot(vec_air_time_diff, function(x) 1 / mean(x), 3)
boot::boot()
data_law <- as_tibble(bootstrap::law)
# Bootstrap
n <- 10
boot_ <- data_law %>%
bootstrap(n)
grp_boot <- boot_$strap %>% map(as_tibble)
# define function of R
r <- function(tib, col1=1, col2=2) {
return(cor(tib[, col1], tib[, col2])[[1]])
}
# jackknife
r_boot <-  grp_boot %>% map_dbl(r)
jknf <- r_boot %>% jackknife(mean)
#result
jknf$jack.se
MLE_lambda <- 1 / mean(vec_time_diff)
#
# data_air_time_diff <- vec_air_time_diff %>%
#   as_tibble()
#
# bootstrap(data_air_time_diff, 3)$strap %>%
#   map(as_tibble)
boot::boot(vec_air_time_diff, function(x) 1 / mean(x), 3)
MLE_exp <- function(data){
return(1 / mean(data))
}
MLE_lambda <- MLE_exp(vec_air_time_diff)
#
# data_air_time_diff <- vec_air_time_diff %>%
#   as_tibble()
#
# bootstrap(data_air_time_diff, 3)$strap %>%
#   map(as_tibble)
boot::boot(vec_air_time_diff, function(x) 1 / mean(x), 3)
MLE_exp <- function(data){
return(1 / mean(data))
}
MLE_lambda <- MLE_exp(vec_air_time_diff)
#
# data_air_time_diff <- vec_air_time_diff %>%
#   as_tibble()
#
# bootstrap(data_air_time_diff, 3)$strap %>%
#   map(as_tibble)
boot::boot(vec_air_time_diff, MLE_exp(), 3)
MLE_exp <- function(data){
return(1 / mean(data))
}
MLE_lambda <- MLE_exp(vec_air_time_diff)
#
# data_air_time_diff <- vec_air_time_diff %>%
#   as_tibble()
#
# bootstrap(data_air_time_diff, 3)$strap %>%
#   map(as_tibble)
boot::boot(vec_air_time_diff, MLE_exp, 3)
MLE_exp <- function(data, i){
return(1 / mean(data[[i]]))
}
MLE_lambda <- MLE_exp(vec_air_time_diff)
MLE_exp <- function(data, i){
return(1 / mean(data[[i]]))
}
# MLE_lambda <- MLE_exp(vec_air_time_diff)
#
# data_air_time_diff <- vec_air_time_diff %>%
#   as_tibble()
#
# bootstrap(data_air_time_diff, 3)$strap %>%
#   map(as_tibble)
boot::boot(vec_air_time_diff, MLE_exp, 3)
boot::bootlm(mpg ~ wt, data = resample_bootstrap(mtcars))
lm(mpg ~ wt, data = resample_bootstrap(mtcars))
MLE_exp <- function(data, i){
return(1 / mean(data[[i]]))
}
# MLE_lambda <- MLE_exp(vec_air_time_diff)
#
# data_air_time_diff <- vec_air_time_diff %>%
#   as_tibble()
#
# bootstrap(data_air_time_diff, 3)$strap %>%
#   map(as_tibble)
boot::boot(vec_air_time_diff, MLE_exp, 3)
MLE_exp <- function(data, i){
return(1 / mean(data[i]))
}
# MLE_lambda <- MLE_exp(vec_air_time_diff)
#
# data_air_time_diff <- vec_air_time_diff %>%
#   as_tibble()
#
# bootstrap(data_air_time_diff, 3)$strap %>%
#   map(as_tibble)
boot::boot(vec_air_time_diff, MLE_exp, 3)
MLE_exp <- function(data, i){
return(1 / mean(data[i]))
}
MLE_lambda <- MLE_exp(vec_air_time_diff, .)
MLE_exp <- function(data, i){
return(1 / mean(data[i]))
}
MLE_lambda <- 1 / mean(vec_air_time_diff)
# MLE_lambda <- MLE_exp(vec_air_time_diff)
#
# data_air_time_diff <- vec_air_time_diff %>%
#   as_tibble()
#
# bootstrap(data_air_time_diff, 3)$strap %>%
#   map(as_tibble)
boot::boot(vec_air_time_diff, MLE_exp, 3)
MLE_exp <- function(data, i){
return(1 / mean(data[i]))
}
MLE_lambda <- 1 / mean(vec_air_time_diff)
MLE_lambda
boot::boot(vec_air_time_diff, MLE_exp, 3)
MLE_exp <- function(data, i){
return(1 / mean(data[i]))
}
boot::boot(vec_air_time_diff, MLE_exp, 3)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# library(modelr)
library(corrr)
jackknife <- bootstrap::jackknife
options(warn=-1)
library(lattice)
get_r <- function(data, indices, x, y) {
d <- data[indices, ]
r <- as.numeric(cor(d[x], d[y]))
return(r)
}
get_r_var <- function(x, y, data, indices, its) {
d <- data[indices, ]
r <- cor(d[x], d[y]) %>%
as.numeric()
n <- nrow(d)
v <- boot::boot(
x=x,
y=y,
R = its,
data = d,
statistic = get_r
) %>%
pluck("t") %>%
var(na.rm = TRUE)
return(c(r, v))
}
boot_t_out <- boot::boot(
x = "LSAT", y = "GPA", its = 200,
R = 1000, data = tbl_law, statistic = get_r_var
)
# bootstrap for every sample
boot_grp_boot <- list()
grp_boot_grp_boot <- list()
sd_r_boot <- numeric(0)
for (i in 1:n){
boot_grp_boot[i] <- modelr::bootstrap(grp_boot[[i]] %>%
as.data.frame(), n)
grp_boot_grp_boot[[i]] <- boot_grp_boot[[i]] %>%
map(as_tibble) # convert to tibble
sd_r_boot[[i]] <- grp_boot_grp_boot[[i]] %>%
map_dbl(r) %>%
sd()
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# library(modelr)
library(corrr)
jackknife <- bootstrap::jackknife
options(warn=-1)
library(lattice)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# library(modelr)
library(corrr)
jackknife <- bootstrap::jackknife
options(warn=-1)
library(lattice)
tbl_law <- bootstrap::law %>% as_tibble
# Bootstrap
n <- 100
boot_ <- tbl_law %>%
modelr::bootstrap(n)
grp_boot <- boot_$strap %>% map(as_tibble)
# define function of R
r <- function(tib, col1=1, col2=2) {
return(cor(tib[, col1], tib[, col2])[[1]])
}
# jackknife
r_boot <-  grp_boot %>% map_dbl(r)
jknf <- r_boot %>% jackknife(mean)
#result
jknf$jack.se
r_mu <- r(tbl_law)
r_mu
t_boot <- (r_boot - r_mu) / sd_r_boot
alpha <- 0.1
Qt <- quantile(t_boot, c(alpha/2, 1-alpha/2), type = 1)
se_boot <- sd(r_boot)
r_mu + Qt * se_boot
t_boot <- (r_boot - r_mu) / sd_r_boot
alpha <- 0.1
Qt <- quantile(t_boot, c(alpha/2, 1-alpha/2), type = 1)
se_boot <- sd(r_boot)
r_mu + Qt * se_boot
# bootstrap for every sample
boot_grp_boot <- list()
grp_boot_grp_boot <- list()
sd_r_boot <- numeric(0)
for (i in 1:n){
boot_grp_boot[i] <- modelr::bootstrap(grp_boot[[i]] %>%
as.data.frame(), n)
grp_boot_grp_boot[[i]] <- boot_grp_boot[[i]] %>%
map(as_tibble) # convert to tibble
sd_r_boot[[i]] <- grp_boot_grp_boot[[i]] %>%
map_dbl(r) %>%
sd()
}
t_boot <- (r_boot - r_mu) / sd_r_boot
alpha <- 0.1
Qt <- quantile(t_boot, c(alpha/2, 1-alpha/2), type = 1)
se_boot <- sd(r_boot)
r_mu + Qt * se_boot
get_r <- function(data, indices, x, y) {
d <- data[indices, ]
r <- as.numeric(cor(d[x], d[y]))
return(r)
}
get_r_var <- function(x, y, data, indices, its) {
d <- data[indices, ]
r <- cor(d[x], d[y]) %>%
as.numeric()
n <- nrow(d)
v <- boot::boot(
x=x,
y=y,
R = its,
data = d,
statistic = get_r
) %>%
pluck("t") %>%
var(na.rm = TRUE)
return(c(r, v))
}
boot_t_out <- boot::boot(
x = "LSAT", y = "GPA", its = 200,
R = 1000, data = tbl_law, statistic = get_r_var
)
boot::boot.ci(boot_t_out, type="stud")
library(DAAG); attach(ironslag)
a <- seq(10, 40, .1) #sequence for plotting fits
L1 <- lm(magnetic ~ chemical)
plot(chemical, magnetic, main="Linear", pch=16)
yhat1 <- L1$coef[1] + L1$coef[2] * a
lines(a, yhat1, lwd=2)
L2 <- lm(magnetic ~ poly(chemical, 2, raw=TRUE))
plot(chemical, magnetic, main="Quadratic", pch=16)
yhat2 <- L2$coef[1] + L2$coef[2] * a + L2$coef[3] * a^2
lines(a, yhat2, lwd=2)
L3 <- lm(log(magnetic) ~ chemical)
plot(chemical, magnetic, main="Exponential", pch=16)
logyhat3 <- L3$coef[1] + L3$coef[2] * a
yhat3 <- exp(logyhat3)
lines(a, yhat3, lwd=2)
L4 <- lm(magnetic ~ poly(chemical, 3, raw=TRUE))
plot(chemical, magnetic, main="Cubic", pch=16)
hat4 <- L4$coef[1] + L4$coef[2] * a + L4$coef[3] * a^2 + L4$coef[4] * a^3
lines(a, hat4, lwd=2)
n <- length(magnetic) #in DAAG ironslag
e1 <- e2 <- e3 <- e4 <- numeric(n)
# for n-fold cross validation
# fit models on leave-one-out samples
?data
"qq"
/
